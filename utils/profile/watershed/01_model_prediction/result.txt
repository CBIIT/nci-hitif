Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    50                                           def model_prediction(img,model,param):
    51                                           
    52                                               # Change the datatype with normalization. (u16 -> ubyte)
    53         1       5986.0   5986.0      0.2      img = cv2.normalize(src=img, dst=None, alpha=0, beta=255, norm_type=cv2.NORM_MINMAX, dtype=cv2.CV_8U)
    54                                           
    55                                               # Change the input resolution into padded resolution.
    56         1          4.0      4.0      0.0      dim1 = param['padded_width']
    57         1          1.0      1.0      0.0      dim2 = param['padded_height']
    58         1          6.0      6.0      0.0      dim_original_height, dim_original_width = img[0].shape
    59                                           
    60         1         36.0     36.0      0.0      imshape = np.array([dim2, dim1]).astype('uint64')
    61         1          4.0      4.0      0.0      noofImages = img.shape[0]
    62                                           
    63         1          2.0      2.0      0.0      batch_size = param['batch_size']
    64         1       2309.0   2309.0      0.1      imagesNP = np.zeros([noofImages, imshape[0], imshape[1]], dtype=np.float32)
    65                                           
    66         2          7.0      3.5      0.0      for index in range(len(img)):
    67         1          4.0      4.0      0.0          input_cell = img[index, :, :]
    68         1        861.0    861.0      0.0          im_in = input_cell.astype('float32')
    69         1          9.0      9.0      0.0          c_im_in_shape = np.array(im_in.shape)
    70         1         38.0     38.0      0.0          c_im_in_shape_pad = ((c_im_in_shape - imshape) / 2).astype('int')
    71         1         11.0     11.0      0.0          im_in_pad = np.lib.pad(im_in, (
    72         1          4.0      4.0      0.0              (-c_im_in_shape_pad[0], -c_im_in_shape_pad[0]), (-c_im_in_shape_pad[1], -c_im_in_shape_pad[1])),
    73         1       5674.0   5674.0      0.2                                 'constant').copy()
    74         1          3.0      3.0      0.0          del im_in
    75         1          2.0      2.0      0.0          im_in = im_in_pad
    76         1          1.0      1.0      0.0          del im_in_pad
    77                                           
    78         1          1.0      1.0      0.0          xs = 0
    79         1          1.0      1.0      0.0          ys = 0
    80         1          3.0      3.0      0.0          xe = im_in.shape[0]
    81         1          2.0      2.0      0.0          ye = im_in.shape[1]
    82                                           
    83         1        732.0    732.0      0.0          c_im_in_max = np.amax(im_in)
    84         1         28.0     28.0      0.0          if c_im_in_max > 255:
    85                                                       imagesNP[index, xs:xe, ys:ye] = im_in / float((2 ** 16) - 1)
    86         1         10.0     10.0      0.0          elif 0 <= c_im_in_max <= 255:
    87         1       1762.0   1762.0      0.1              imagesNP[index, xs:xe, ys:ye] = im_in / float((2 ** 8) - 1)
    88                                                   elif 0 <= c_im_in_max <= 1.0:
    89                                                       imagesNP[index, xs:xe, ys:ye] = im_in
    90                                           
    91         1    3357619.0 3357619.0     99.3      imgs_mask = unet_predict(model, batch_size, imagesNP)
    92                                           
    93         1       4534.0   4534.0      0.1      result = np.zeros((noofImages, dim_original_height, dim_original_width))
    94                                           
    95         2          7.0      3.5      0.0      for i in range(noofImages):
    96         1          2.0      2.0      0.0          yoffset = int((dim2 - dim_original_height) / 2)
    97         1          2.0      2.0      0.0          xoffset = int((dim1 - dim_original_width) / 2)
    98         1          5.0      5.0      0.0          if imgs_mask.ndim == 4:
    99         1         10.0     10.0      0.0              im_in = (imgs_mask[i, :, :, :])
   100         1          1.0      1.0      0.0              im_in = im_in[yoffset:yoffset + dim_original_height,
   101         1          2.0      2.0      0.0                      xoffset:xoffset + dim_original_width, :]
   102         1         58.0     58.0      0.0              im_in = np.swapaxes(im_in, 0, 2)
   103         1         15.0     15.0      0.0              im_in = np.transpose(im_in, (0, 2, 1))
   104         1          3.0      3.0      0.0              if im_in.shape[0] == 1:
   105         1         33.0     33.0      0.0                  im_in = np.squeeze(im_in)
   106         1          2.0      2.0      0.0          if imgs_mask.ndim == 3:
   107                                                       im_in = np.squeeze(imgs_mask[i, :, :])
   108                                                       im_in = im_in[yoffset:yoffset + dim_original_height,
   109                                                               xoffset:xoffset + dim_original_width]
   110         1          2.0      2.0      0.0          if imgs_mask.ndim == 2:
   111                                                       im_in = imgs_mask
   112                                                       im_in = im_in[yoffset:yoffset + dim_original_height,
   113                                                               xoffset:xoffset + dim_original_width]
   114         1       1598.0   1598.0      0.0          result[i,:,:] = im_in
   115                                           
   116         1          1.0      1.0      0.0      return result


1/1 [==============================] - 9s 9s/step
