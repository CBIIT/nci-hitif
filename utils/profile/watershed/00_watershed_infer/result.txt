Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   118                                           def watershed_infer(img,gaussian_blur_model,distance_map_model,config_file_path):
   119                                           
   120                                               # Parser (Config file -> Dictionary)
   121         1        551.0    551.0      0.0      config = configparser.ConfigParser()
   122         1        776.0    776.0      0.0      config.read(config_file_path)
   123         1        185.0    185.0      0.0      param = {s: dict(config.items(s)) for s in config.sections()}['general']
   124                                           
   125         7          6.0      0.9      0.0      for key in param:
   126         6          6.0      1.0      0.0          if key == "global_threshold":
   127         1          4.0      4.0      0.0              param[key] = float(param[key])
   128                                                   else:
   129         5          8.0      1.6      0.0              param[key] = int(param[key])
   130                                           
   131                                               # Prediciton (Galussian_Blur DL model)
   132         1    3338679.0 3338679.0     42.8      img_gauss = model_prediction(img, gaussian_blur_model, param)
   133                                           
   134                                               # Prediction (Distance MAP DL Model)
   135         1    3393051.0 3393051.0     43.5      result = model_prediction(img_gauss, distance_map_model, param)
   136                                           
   137                                               # Global Thresholding
   138         1       3308.0   3308.0      0.0      result[result<param['global_threshold']] = 0
   139         1       1427.0   1427.0      0.0      result[result!=0] = 1
   140                                           
   141         1       1865.0   1865.0      0.0      mask = np.zeros(result.shape)
   142                                           
   143         2          7.0      3.5      0.0      for i in range(len(result)):
   144                                           
   145                                                   # Morphorligcal Operation
   146         1     511372.0 511372.0      6.6          mask[i] = closing(result[i], disk(6))
   147                                           
   148                                                   # Connected Component Analysis
   149         1      12588.0  12588.0      0.2          mask[i] = label(mask[i], connectivity=1, background=0)
   150                                           
   151                                                   # Watershed
   152         1     498238.0 498238.0      6.4          watershed_result = watershed(img_gauss[i], mask[i])
   153                                           
   154                                                   # Label size filter
   155         1      14386.0  14386.0      0.2          mask[i] = remove_small_objects(watershed_result, param['label_min_size'], connectivity=1)
   156         1      15246.0  15246.0      0.2          mask[i] = remove_large_objects(watershed_result, param['label_max_size'], connectivity=1)
   157                                           
   158         1          1.0      1.0      0.0      return mask

