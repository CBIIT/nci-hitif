Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    37                                           def unet_predict(model, batch_size, imgs_test):
    38         1        111.0    111.0      0.0      model_input_channelSize = model.layers[0].input_shape[-1]
    39         1       1205.0   1205.0      0.0      imgs_test = imgs_test.astype('float32')
    40                                           
    41         1          2.0      2.0      0.0      if model_input_channelSize > 1:
    42         1       8868.0   8868.0      0.3          imgs_test = np.stack((imgs_test,) * model_input_channelSize, -1)
    43                                               elif model_input_channelSize == 1:
    44                                                   imgs_test = np.expand_dims(imgs_test, 3)
    45         1    3316162.0 3316162.0     99.7      imgs_mask_test = model.predict(imgs_test, batch_size=batch_size, verbose=1)
    46                                           
    47         1          2.0      2.0      0.0      return (imgs_mask_test)


1/1 [==============================] - 9s 9s/step

1/1 [==============================] - 3s 3s/step
Timer unit: 1e-06 s

Total time: 3.31696 s
File: ../src/watershed_infer_profile.py
Function: unet_predict at line 37

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    37                                           def unet_predict(model, batch_size, imgs_test):
    38         1         45.0     45.0      0.0      model_input_channelSize = model.layers[0].input_shape[-1]
    39         1       2815.0   2815.0      0.1      imgs_test = imgs_test.astype('float32')
    40                                           
    41         1          2.0      2.0      0.0      if model_input_channelSize > 1:
    42         1       8680.0   8680.0      0.3          imgs_test = np.stack((imgs_test,) * model_input_channelSize, -1)
    43                                               elif model_input_channelSize == 1:
    44                                                   imgs_test = np.expand_dims(imgs_test, 3)
    45         1    3305409.0 3305409.0     99.7      imgs_mask_test = model.predict(imgs_test, batch_size=batch_size, verbose=1)
    46                                           
    47         1          5.0      5.0      0.0      return (imgs_mask_test)

