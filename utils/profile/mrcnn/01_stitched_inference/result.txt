Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   181                                           def stitched_inference(image, cropsize, model, padding=40):#, minsize=100):
   182                                               """
   183                                               array: Array to be padded
   184                                               reference: Reference array with the desired shape
   185                                               offsets: list of offsets (number of elements must be equal to the dimension of the array)
   186                                               """
   187         1        330.0    330.0      0.0      stack = np.zeros((image.shape[0], image.shape[1],1),dtype=np.uint16) # make new image of zeros (exclude third dimension, not using rgb)
   188         1       4596.0   4596.0      0.0      visited = np.zeros(image.shape[0:2])
   189         1       4545.0   4545.0      0.0      num_times_visited = np.zeros(image.shape[0:2])
   190                                               
   191         1          2.0      2.0      0.0      num_row = image.shape[0] # num rows in the image
   192         1          1.0      1.0      0.0      num_col = image.shape[1]
   193                                               # print(image.shape)
   194                                               
   195         1          1.0      1.0      0.0      assert cropsize < num_row and cropsize < num_col, 'cropsize must be smaller than the image dimensions'
   196                                                   
   197                                               #rowlist = np.concatenate(([0],np.arange(cropsize-padding, num_row, cropsize)))
   198                                               #collist = np.concatenate(([0],np.arange(cropsize-padding, num_col, cropsize)))
   199         1          1.0      1.0      0.0      checkpoint_id = 1
   200         7         30.0      4.3      0.0      for row in np.arange(0, num_row, cropsize-padding): # row defines the rightbound side of box
   201        48        397.0      8.3      0.0          for col in np.arange(0, num_col, cropsize-padding): # col defines lowerbound of box
   202        42      57193.0   1361.7      0.2              masks_with_ids = np.zeros(image.shape[0:2])
   203        42         62.0      1.5      0.0              upperbound = row
   204        42        181.0      4.3      0.0              lowerbound = row + cropsize
   205        42         40.0      1.0      0.0              leftbound  = col
   206        42         57.0      1.4      0.0              rightbound = col + cropsize
   207                                                       
   208        42         93.0      2.2      0.0              if lowerbound > num_row:
   209        14         13.0      0.9      0.0                  lowerbound = num_row
   210        14         15.0      1.1      0.0                  upperbound = num_row-cropsize
   211                                                       
   212        42         54.0      1.3      0.0              if rightbound > num_col:
   213        12         12.0      1.0      0.0                  rightbound = num_col
   214        12         12.0      1.0      0.0                  leftbound  = num_col-cropsize
   215                                                       #upperbound = bound(final_image, cropsize, padding, minsize, row, 'upper')
   216                                                       #lowerbound = bound(final_image, cropsize, padding, minsize, row, 'lower')
   217                                                       #rightbound = bound(final_image, cropsize, padding, minsize, col, 'right')
   218                                                       #leftbound  = bound(final_image, cropsize, padding, minsize, col, 'left')
   219                                                       #print(row)
   220                                                       #print(col)
   221                                                       # print('bounds:')
   222                                                       # print('upper: {}'.format(upperbound))
   223                                                       # print('lower: {}'.format(lowerbound))
   224                                                       # print('left : {}'.format(leftbound))
   225                                                       # print('right: {}'.format(rightbound))
   226                                                       
   227        42      10484.0    249.6      0.0              num_times_visited[upperbound:lowerbound, leftbound:rightbound] += 1
   228        42        138.0      3.3      0.0              cropped_image = image[upperbound:lowerbound, leftbound:rightbound, :]
   229                                                       #print('cropped image shape: {}'.format(cropped_image.shape))
   230                                                       #print(cropped_image.shape)
   231                                                       
   232        42   23496073.0 559430.3     93.7              masks = run_inference(model, cropped_image)
   233                                                       
   234                                                       #padded_masks = pad(masks, [num_row, num_col, masks.shape[2]], [upperbound, leftbound])
   235                                                       #padded_masks = pad(masks, [num_row, num_col, masks.shape[2]], [upperbound,leftbound,0])
   236                                                       #print('mask shape:')
   237                                                       #print (padded_masks.shape)
   238                                                       
   239        42     105749.0   2517.8      0.4              one_inference_mask_image, checkpoint_id = mask_stack_to_single_image(masks, checkpoint_id) # works
   240        42      16756.0    399.0      0.1              padded_inference_mask = pad(one_inference_mask_image, [num_row, num_col], [upperbound,leftbound])
   241        42       1501.0     35.7      0.0              padded_inference_mask = np.expand_dims(padded_inference_mask, axis=2)
   242        42    1368588.0  32585.4      5.5              stack = np.concatenate((stack, padded_inference_mask), axis=2)
   243                                                                   
   244         1          1.0      1.0      0.0      return stack, num_times_visited

Connectivity matrix built
(604, 604)
222
(604,)
<class 'numpy.ndarray'>
applied lookup
(1078, 1278, 43)
